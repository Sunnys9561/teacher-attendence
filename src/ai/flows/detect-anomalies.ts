// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview AI-powered tool to detect and flag potentially fraudulent timestamps.
 *
 * - detectAttendanceAnomalies - A function that handles the detection of attendance anomalies.
 * - DetectAttendanceAnomaliesInput - The input type for the detectAttendanceAnomalies function.
 * - DetectAttendanceAnomaliesOutput - The return type for the detectAttendanceAnomalies function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const DetectAttendanceAnomaliesInputSchema = z.object({
  employeeId: z.string().describe('The ID of the employee.'),
  employeeName: z.string().describe('The name of the employee.'), // Added employee name
  timestamp: z.string().describe('The timestamp to check for anomalies.'),
  previousTimestamps: z.array(z.string()).describe('The previous timestamps of the employee.'),
});
export type DetectAttendanceAnomaliesInput = z.infer<typeof DetectAttendanceAnomaliesInputSchema>;

const DetectAttendanceAnomaliesOutputSchema = z.object({
  isAnomalous: z.boolean().describe('Whether the timestamp is potentially fraudulent.'),
  explanation: z.string().describe('The explanation of why the timestamp is anomalous.'),
});
export type DetectAttendanceAnomaliesOutput = z.infer<typeof DetectAttendanceAnomaliesOutputSchema>;

export async function detectAttendanceAnomalies(input: DetectAttendanceAnomaliesInput): Promise<DetectAttendanceAnomaliesOutput> {
  return detectAttendanceAnomaliesFlow(input);
}

const prompt = ai.definePrompt({
  name: 'detectAttendanceAnomaliesPrompt',
  input: {schema: DetectAttendanceAnomaliesInputSchema},
  output: {schema: DetectAttendanceAnomaliesOutputSchema},
  prompt: `You are an AI expert in fraud detection. Your job is to detect if a given timestamp is an anomaly given the employee ID, employee name and previous timestamps.

Employee ID: {{{employeeId}}}
Employee Name: {{{employeeName}}}
Timestamp to check: {{{timestamp}}}
Previous timestamps: {{#each previousTimestamps}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}

Based on this information, determine if the timestamp is an anomaly. If it is, explain why.

Consider these factors when detecting anomalies:
- Is the timestamp too far away from the previous timestamps?
- Is the timestamp on a weekend or holiday?
- Is the timestamp at an unusual time of day?
- Is the timestamp similar to other fraudulent timestamps for this employee or in general?
`,
});

const detectAttendanceAnomaliesFlow = ai.defineFlow(
  {
    name: 'detectAttendanceAnomaliesFlow',
    inputSchema: DetectAttendanceAnomaliesInputSchema,
    outputSchema: DetectAttendanceAnomaliesOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
